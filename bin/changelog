#!/usr/bin/env node
'use strict';

/*
 * This script generates the template a changelog by comparing a current version
 * with master. Run this, copy what's logged into the `CHANGELOG.md` and update
 * the top section based on the changes listed in "Community Contributions"
 *
 * Usage:
 *
 * bin/changelog
 */
var EOL       = require('os').EOL;
var multiline = require('multiline');
var Promise   = require('../lib/ext/promise');  // jshint ignore:line
var GitHubApi = require('github');

var github         = new GitHubApi({ version: '3.0.0' });
var compareCommits = Promise.denodeify(github.repos.compareCommits);
var parseCommit = require('../lib/helpers/parse-commit');
var getRepo = require('../lib/helpers/get-repository');
var updateChangelog = require('../lib/helpers/update-changelog');

getRepo()
  .then(function(repository) {
    compareCommits({
      user: repository.organization,
      repo: repository.project,
      base: 'v' + repository.version,
      head: 'master'
    }).then(function(res) {
      // console.log('Response', res);
      var commits = res.commits.map(parseCommit);
      var merges = commits.filter(function(commit) {
        // TODO allow hooks into this filter
        return commit.type === 'merge';
      });
      var other = commits.filter(function(commit) {
        // TODO allow hooks into this filter
        return commit.type === 'revert' || (commit.type && commit.scope && commit.title);
      });

      var contributions = merges.sort(function(a, b) {
          return a.number > b.number;
        })
        .map(function(pr) {
          var link   = '[#' + pr.number + ']' +
            '(https://github.com/ember-cli/ember-cli/pull/' + pr.number + ')';
          var title  = pr.title;
          var author = '[@' + pr.authorHandle + ']' +
            '(https://github.com/' + pr.authorHandle +')';

          return '- ' + link + ' ' + title + ' ' + author;

        });

      var changes = other.map(function(commit) {
        var ref = commit.reference.substr(0, 8);

        return '- [' + ref + '](https://github.com/' + repository.organization + '/' + repository.project +
        '/commit/' + commit.reference + ') **' + commit.type.toLowerCase() + '(' + commit.scope + ')**: ' + commit.title +
          ' *by [' + commit.author + '](https://github.com/' + commit.authorHandle +')*';

      });

      return {
        contributions: contributions,
        changes: changes
      };

    }).then(function(changes) {

      var changeLog = generateChangelog(repository.version, changes);
      updateChangelog([
        { offset: 3, lines: changeLog }
      ]);

    }).catch(function(err) {
      console.error(err);
    });
  });

function generateChangelog(version, changes) {
  return ['## ' + version, '', '### Pull Requests']
    .concat(changes.contributions)
    .concat(['', '### Commits', ''])
    .concat(changes.changes)
    .concat(['']);
}
